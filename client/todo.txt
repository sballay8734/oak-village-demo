1. Organize routing. Each role should see a different stack
2. Use "<Link>" when ... I want button styling (focus, hover, etc)
3. use "router.navigate" when ... Submitting forms etc..
4. Custom modal does NOT and will NOT render above native modal



For example, let's say you have the following file structure:


Copy code
app/
  _layout.tsx
  index.tsx
  home.tsx
  profile/
    index.tsx
    
When the URL is /, Expo Router matches it to the index.tsx file in the root directory and renders its content within the Slot component in _layout.tsx.
When the URL is /home, Expo Router matches it to the home.tsx file and renders its content within the Slot.
When the URL is /profile, Expo Router matches it to the profile directory and renders the content of the index.tsx file within that directory inside the Slot.
The Slot component abstracts away the complexity of manually managing the rendering of different routes and provides a declarative way to define the structure of your application. It automatically takes care of rendering the appropriate content based on the current route, making it easier to build and navigate between different screens in your application.